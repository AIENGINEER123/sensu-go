package generator

import (
	"bytes"
	"io/ioutil"
	"path/filepath"

	"github.com/dave/jennifer/jen"
)

// Saver represents an item that can write generated types.
type Saver interface {
	Save(f *jen.File) error
}

// fileSaver writes generated types to disk given path.
type fileSaver struct {
	sourcePath string
}

// File extension .gql.go is used for generated files
func (s fileSaver) outputPath() string {
	ext := filepath.Ext(s.sourcePath)
	fpath := s.sourcePath[0 : len(s.sourcePath)-len(ext)]
	return fpath + ".gql.go"
}

// Save renders types to disk
func (s fileSaver) Save(f *jen.File) error {
	buf := &bytes.Buffer{}
	if err := f.Render(buf); err != nil {
		return err
	}
	return ioutil.WriteFile(s.outputPath(), buf.Bytes(), 0644)
}

// Generator generates Go code for given type defnitions found in given file.
type Generator struct {
	Saver
	source *GraphQLFile
	jen    *jen.File
}

// NewGenerator returns new generator given path and name of package resulting
// file will reside.
func NewGenerator(pkgName string, source *GraphQLFile) Generator {
	return Generator{
		Saver:  fileSaver{sourcePath: source.path},
		source: source,
		jen:    jen.NewFile(pkgName),
	}
}

// Run generates code and saves
func (g Generator) Run() error {
	jen := g.jen

	// Warning comment
	jen.Comment("Code generated by scripts/gengraphql.go. DO NOT EDIT.")
	jen.Line()

	// Handle scalar
	// Handle object
	// Handle interface
	// Handle union
	// Handle enum
	// Handle input object
	// Handle directive

	// Generate interface
	// Generate type definition

	return g.Save(jen)
}
