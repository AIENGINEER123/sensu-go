// Code generated by graphql/generator package. DO NOT EDIT.

package schema

import (
	context "context"
	graphql "github.com/graphql-go/graphql"
	util "github.com/sensu/sensu-go/backend/apid/graphql/generator/util"
)

//
// QueryResolver represents a collection of methods whose products represent the
// response values of the 'Query' type.
//
//  == Example SDL
//
//    """
//    Dog's are not hooman.
//    """
//    type Dog implements Pet {
//      "name of this fine beast."
//      name:  String!
//
//      "breed of this silly animal; probably shibe."
//      breed: [Breed]
//    }
//
//  == Example generated interface
//
//   // DogResolver ...
//   type DogResolver interface {
//     // Name implements response to request for name field.
//     Name(context.Context, interface{}, graphql.Params) interface{}
//     // Breed implements response to request for breed field.
//     Breed(context.Context, interface{}, graphql.Params) interface{}
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
//  == Example implementation ...
//
//   // MyDogResolver implements DogResolver interface
//   type MyDogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *MyDogResolver) Name(ctx context.Context, r interface{}, p graphql.Params) interface{} {
//     // ... implementation details ...
//     dog := r.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *MyDogResolver) Name(ctx context.Context, r interface{}, p graphql.Params) interface{} {
//     // ... implementation details ...
//     dog := r.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *MyDogResolver) IsTypeOf(r interface{}, p graphql.IsTypeOfParams) interface{} {
//     // ... implementation details ...
//     _, ok := r.(DogGetter)
//     return ok
//   }
type QueryResolver interface {
	// checks implements response to request for 'Checks' field.
	Checks(context.Context, interface{}, graphql.Params) interface{}
	// IsTypeOf is used to determine if a given value is associated with the Query type
	IsTypeOf(context.Context, graphql.IsTypeOfParams) interface{}
}

// Query The query root of Sensu's GraphQL interface.
func Query() graphql.ObjectConfig {
	return graphql.ObjectConfig{
		Description: "The query root of Sensu's GraphQL interface.",
		Fields: graphql.Fields{"checks": &graphql.Field{
			Args:              graphql.FieldConfigArgument{},
			DeprecationReason: "",
			Description:       "self descriptive",
			Name:              "checks",
			Type:              graphql.NewList(util.OutputType("Check")),
		}},
		Interfaces: []*graphql.Interface{},
		IsTypeOf: func(_ graphql.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see QueryResolver.")
		},
		Name: "Query",
	}
}

//
// NamespaceResolver represents a collection of methods whose products represent the
// response values of the 'Namespace' type.
//
//  == Example SDL
//
//    """
//    Dog's are not hooman.
//    """
//    type Dog implements Pet {
//      "name of this fine beast."
//      name:  String!
//
//      "breed of this silly animal; probably shibe."
//      breed: [Breed]
//    }
//
//  == Example generated interface
//
//   // DogResolver ...
//   type DogResolver interface {
//     // Name implements response to request for name field.
//     Name(context.Context, interface{}, graphql.Params) interface{}
//     // Breed implements response to request for breed field.
//     Breed(context.Context, interface{}, graphql.Params) interface{}
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
//  == Example implementation ...
//
//   // MyDogResolver implements DogResolver interface
//   type MyDogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *MyDogResolver) Name(ctx context.Context, r interface{}, p graphql.Params) interface{} {
//     // ... implementation details ...
//     dog := r.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *MyDogResolver) Name(ctx context.Context, r interface{}, p graphql.Params) interface{} {
//     // ... implementation details ...
//     dog := r.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *MyDogResolver) IsTypeOf(r interface{}, p graphql.IsTypeOfParams) interface{} {
//     // ... implementation details ...
//     _, ok := r.(DogGetter)
//     return ok
//   }
type NamespaceResolver interface {
	// environment implements response to request for 'Environment' field.
	Environment(context.Context, interface{}, graphql.Params) interface{}
	// organization implements response to request for 'Organization' field.
	Organization(context.Context, interface{}, graphql.Params) interface{}
	// IsTypeOf is used to determine if a given value is associated with the Namespace type
	IsTypeOf(context.Context, graphql.IsTypeOfParams) interface{}
}

// Namespace represents the unique details describing where a resource is located.
func Namespace() graphql.ObjectConfig {
	return graphql.ObjectConfig{
		Description: "Namespace represents the unique details describing where a resource is located.",
		Fields: graphql.Fields{
			"environment": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "environment indicates to which env a check belongs to.",
				Name:              "environment",
				Type:              graphql.String,
			},
			"organization": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "organization indicates to which org a check belongs to.",
				Name:              "organization",
				Type:              graphql.NewNonNull(graphql.String),
			},
		},
		Interfaces: []*graphql.Interface{},
		IsTypeOf: func(_ graphql.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see NamespaceResolver.")
		},
		Name: "Namespace",
	}
}

//
// CheckResolver represents a collection of methods whose products represent the
// response values of the 'Check' type.
//
//  == Example SDL
//
//    """
//    Dog's are not hooman.
//    """
//    type Dog implements Pet {
//      "name of this fine beast."
//      name:  String!
//
//      "breed of this silly animal; probably shibe."
//      breed: [Breed]
//    }
//
//  == Example generated interface
//
//   // DogResolver ...
//   type DogResolver interface {
//     // Name implements response to request for name field.
//     Name(context.Context, interface{}, graphql.Params) interface{}
//     // Breed implements response to request for breed field.
//     Breed(context.Context, interface{}, graphql.Params) interface{}
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
//  == Example implementation ...
//
//   // MyDogResolver implements DogResolver interface
//   type MyDogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *MyDogResolver) Name(ctx context.Context, r interface{}, p graphql.Params) interface{} {
//     // ... implementation details ...
//     dog := r.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *MyDogResolver) Name(ctx context.Context, r interface{}, p graphql.Params) interface{} {
//     // ... implementation details ...
//     dog := r.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *MyDogResolver) IsTypeOf(r interface{}, p graphql.IsTypeOfParams) interface{} {
//     // ... implementation details ...
//     _, ok := r.(DogGetter)
//     return ok
//   }
type CheckResolver interface {
	// id implements response to request for 'Id' field.
	Id(context.Context, interface{}, graphql.Params) interface{}
	// namespace implements response to request for 'Namespace' field.
	Namespace(context.Context, interface{}, graphql.Params) interface{}
	// name implements response to request for 'Name' field.
	Name(context.Context, interface{}, graphql.Params) interface{}
	// command implements response to request for 'Command' field.
	Command(context.Context, interface{}, graphql.Params) interface{}
	// handlers implements response to request for 'Handlers' field.
	Handlers(context.Context, interface{}, graphql.Params) interface{}
	// highFlapThreshold implements response to request for 'HighFlapThreshold' field.
	HighFlapThreshold(context.Context, interface{}, graphql.Params) interface{}
	// interval implements response to request for 'Interval' field.
	Interval(context.Context, interface{}, graphql.Params) interface{}
	// lowFlapThreshold implements response to request for 'LowFlapThreshold' field.
	LowFlapThreshold(context.Context, interface{}, graphql.Params) interface{}
	// publish implements response to request for 'Publish' field.
	Publish(context.Context, interface{}, graphql.Params) interface{}
	// IsTypeOf is used to determine if a given value is associated with the Check type
	IsTypeOf(context.Context, graphql.IsTypeOfParams) interface{}
}

// Check A Check is the specification of a check.
func Check() graphql.ObjectConfig {
	return graphql.ObjectConfig{
		Description: "A Check is the specification of a check.",
		Fields: graphql.Fields{
			"command": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "command is the command to be executed.",
				Name:              "command",
				Type:              graphql.NewNonNull(graphql.String),
			},
			"handlers": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "handlers are the event handler for the check (incidents and/or metrics).",
				Name:              "handlers",
				Type:              graphql.NewNonNull(graphql.NewList(graphql.String)),
			},
			"highFlapThreshold": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "HighFlapThreshold is the flap detection high threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Name:              "highFlapThreshold",
				Type:              graphql.Int,
			},
			"id": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "id",
				Type:              graphql.NewNonNull(util.OutputType("ID")),
			},
			"interval": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Interval is the interval, in seconds, at which the check should be run.",
				Name:              "interval",
				Type:              graphql.NewNonNull(graphql.Int),
			},
			"lowFlapThreshold": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "LowFlapThreshold is the flap detection low threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Name:              "lowFlapThreshold",
				Type:              graphql.Int,
			},
			"name": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "name is the unique identifier for a check",
				Name:              "name",
				Type:              graphql.NewNonNull(graphql.String),
			},
			"namespace": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "namespace",
				Type:              graphql.NewNonNull(util.OutputType("Namespace")),
			},
			"publish": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Publish indicates if check requests are published for the check",
				Name:              "publish",
				Type:              graphql.NewNonNull(graphql.Boolean),
			},
		},
		Interfaces: []*graphql.Interface{},
		IsTypeOf: func(_ graphql.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CheckResolver.")
		},
		Name: "Check",
	}
}
