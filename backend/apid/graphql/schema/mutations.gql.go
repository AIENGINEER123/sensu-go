// Code generated by scripts/gengraphql.go. DO NOT EDIT.

package schema

import (
	graphql1 "github.com/graphql-go/graphql"
	mapstructure "github.com/mitchellh/mapstructure"
	graphql "github.com/sensu/sensu-go/graphql"
)

// MutationCreateCheckFieldResolverArgs contains arguments provided to createCheck when selected
type MutationCreateCheckFieldResolverArgs struct {
	Input *CreateCheckInput // Input - self descriptive
}

// MutationCreateCheckFieldResolverParams contains contextual info to resolve createCheck field
type MutationCreateCheckFieldResolverParams struct {
	graphql.ResolveParams
	MutationCreateCheckFieldResolverArgs
}

// MutationCreateCheckFieldResolver implement to resolve requests for the Mutation's createCheck field.
type MutationCreateCheckFieldResolver interface {
	// CreateCheck implements response to request for createCheck field.
	CreateCheck(p MutationCreateCheckFieldResolverParams) (interface{}, error)
}

//
// MutationFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Mutation' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type MutationFieldResolvers interface {
	MutationCreateCheckFieldResolver

	// IsTypeOf is used to determine if a given value is associated with the Mutation type
	IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
}

// MutationAliases implements all methods on MutationFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type MutationAliases struct{}

// CreateCheck implements response to request for 'createCheck' field.
func (_ MutationAliases) CreateCheck(p MutationCreateCheckFieldResolverParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := val.(interface{})
	return ret, err
}

// MutationType The root query for implementing GraphQL mutations.
var MutationType = graphql.NewType("Mutation", graphql.ObjectKind)

// RegisterMutation registers Mutation object type with given service.
func RegisterMutation(svc *graphql.Service, impl MutationFieldResolvers) {
	svc.RegisterObject(_ObjectTypeMutationDesc, impl)
}
func _ObjTypeMutationCreateCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(MutationCreateCheckFieldResolver)
	return func(p graphql1.ResolveParams) (interface{}, error) {
		frp := MutationCreateCheckFieldResolverParams{ResolveParams: p}
		err := mapstructure.Decode(p.Args, &frp.Args)
		if err != nil {
			return nil, err
		}

		return resolver.CreateCheck(frp)
	}
}

func _ObjectTypeMutationConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "The root query for implementing GraphQL mutations.",
		Fields: graphql1.Fields{"createCheck": &graphql1.Field{
			Args: graphql1.FieldConfigArgument{"input": &graphql1.ArgumentConfig{
				Description: "self descriptive",
				Type:        graphql1.NewNonNull(graphql.InputType("CreateCheckInput")),
			}},
			DeprecationReason: "",
			Description:       "Creates a new check.",
			Name:              "createCheck",
			Type:              graphql.OutputType("CreateCheckPayload"),
		}},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see MutationFieldResolvers.")
		},
		Name: "Mutation",
	}
}

// describe Mutation's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeMutationDesc = graphql.ObjectDesc{
	Config:        _ObjectTypeMutationConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{"createCheck": _ObjTypeMutationCreateCheckHandler},
}

// CreateCheckInput self descriptive
type CreateCheckInput struct {
	// ClientMutationId - A unique identifier for the client performing the mutation. ClientMutationId string
	// Ns - namespace the resulting resource will belong to Ns interface{}
	// Name - self descriptive Name string
	// Command - self descriptive Command string
}

// CreateCheckInputType self descriptive
var CreateCheckInputType = graphql.NewType("CreateCheckInput", graphql.InputKind)

// RegisterCreateCheckInput registers CreateCheckInput object type with given service.
func RegisterCreateCheckInput(svc *graphql.Service) {
	svc.RegisterInput(_InputTypeCreateCheckInputDesc)
}
func _InputTypeCreateCheckInputConfigFn() graphql1.InputObjectConfig {
	return graphql1.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.InputObjectConfigFieldMap{
			"clientMutationId": &graphql1.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql1.String,
			},
			"command": &graphql1.InputObjectFieldConfig{
				Description: "self descriptive",
				Type:        graphql1.NewNonNull(graphql1.String),
			},
			"name": &graphql1.InputObjectFieldConfig{
				Description: "self descriptive",
				Type:        graphql1.NewNonNull(graphql1.String),
			},
			"ns": &graphql1.InputObjectFieldConfig{
				DefaultValue: map[string]interface{}{
					"environment":  "default",
					"organization": "default",
				},
				Description: "namespace the resulting resource will belong to",
				Type:        graphql.InputType("Namespace"),
			},
		},
		Name: "CreateCheckInput",
	}
}

// describe CreateCheckInput's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _InputTypeCreateCheckInputDesc = graphql.InputDesc{Config: _InputTypeCreateCheckInputConfigFn}

// CreateCheckPayloadClientMutationIdFieldResolver implement to resolve requests for the CreateCheckPayload's clientMutationId field.
type CreateCheckPayloadClientMutationIdFieldResolver interface {
	// ClientMutationId implements response to request for clientMutationId field.
	ClientMutationId(p graphql.ResolveParams) (string, error)
}

// CreateCheckPayloadCheckFieldResolver implement to resolve requests for the CreateCheckPayload's check field.
type CreateCheckPayloadCheckFieldResolver interface {
	// Check implements response to request for check field.
	Check(p graphql.ResolveParams) (interface{}, error)
}

//
// CreateCheckPayloadFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CreateCheckPayload' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type CreateCheckPayloadFieldResolvers interface {
	CreateCheckPayloadClientMutationIdFieldResolver
	CreateCheckPayloadCheckFieldResolver

	// IsTypeOf is used to determine if a given value is associated with the CreateCheckPayload type
	IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
}

// CreateCheckPayloadAliases implements all methods on CreateCheckPayloadFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type CreateCheckPayloadAliases struct{}

// ClientMutationId implements response to request for 'clientMutationId' field.
func (_ CreateCheckPayloadAliases) ClientMutationId(p graphql.ResolveParams) (string, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := val.(string)
	return ret, err
}

// Check implements response to request for 'check' field.
func (_ CreateCheckPayloadAliases) Check(p graphql.ResolveParams) (interface{}, error) {
	val, err := graphql.DefaultResolver(p.Source, p.Info.FieldName)
	ret := val.(interface{})
	return ret, err
}

// CreateCheckPayloadType self descriptive
var CreateCheckPayloadType = graphql.NewType("CreateCheckPayload", graphql.ObjectKind)

// RegisterCreateCheckPayload registers CreateCheckPayload object type with given service.
func RegisterCreateCheckPayload(svc *graphql.Service, impl CreateCheckPayloadFieldResolvers) {
	svc.RegisterObject(_ObjectTypeCreateCheckPayloadDesc, impl)
}
func _ObjTypeCreateCheckPayloadClientMutationIdHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CreateCheckPayloadClientMutationIdFieldResolver)
	return resolver.ClientMutationId
}

func _ObjTypeCreateCheckPayloadCheckHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CreateCheckPayloadCheckFieldResolver)
	return resolver.Check
}

func _ObjectTypeCreateCheckPayloadConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql1.Fields{
			"check": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The new check.",
				Name:              "check",
				Type:              graphql1.NewNonNull(graphql.OutputType("Check")),
			},
			"clientMutationId": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql1.String,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CreateCheckPayloadFieldResolvers.")
		},
		Name: "CreateCheckPayload",
	}
}

// describe CreateCheckPayload's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjectTypeCreateCheckPayloadDesc = graphql.ObjectDesc{
	Config: _ObjectTypeCreateCheckPayloadConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"check":            _ObjTypeCreateCheckPayloadCheckHandler,
		"clientMutationId": _ObjTypeCreateCheckPayloadClientMutationIdHandler,
	},
}
