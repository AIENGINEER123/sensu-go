// Code generated by graphql/generator package. DO NOT EDIT.

package schema

import (
	context "context"
	graphql "github.com/graphql-go/graphql"
	util "github.com/sensu/sensu-go/backend/apid/graphql/generator/util"
)

//
// MutationResolver represents a collection of methods whose products represent the
// response values of the 'Mutation' type.
//
//  == Example SDL
//
//    """
//    Dog's are not hooman.
//    """
//    type Dog implements Pet {
//      "name of this fine beast."
//      name:  String!
//
//      "breed of this silly animal; probably shibe."
//      breed: [Breed]
//    }
//
//  == Example generated interface
//
//   // DogResolver ...
//   type DogResolver interface {
//     // Name implements response to request for name field.
//     Name(context.Context, interface{}, graphql.Params) interface{}
//     // Breed implements response to request for breed field.
//     Breed(context.Context, interface{}, graphql.Params) interface{}
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
//  == Example implementation ...
//
//   // MyDogResolver implements DogResolver interface
//   type MyDogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *MyDogResolver) Name(ctx context.Context, r interface{}, p graphql.Params) interface{} {
//     // ... implementation details ...
//     dog := r.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *MyDogResolver) Name(ctx context.Context, r interface{}, p graphql.Params) interface{} {
//     // ... implementation details ...
//     dog := r.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *MyDogResolver) IsTypeOf(r interface{}, p graphql.IsTypeOfParams) interface{} {
//     // ... implementation details ...
//     _, ok := r.(DogGetter)
//     return ok
//   }
type MutationResolver interface {
	// createCheck implements response to request for 'CreateCheck' field.
	CreateCheck(context.Context, interface{}, graphql.Params) interface{}
	// IsTypeOf is used to determine if a given value is associated with the Mutation type
	IsTypeOf(context.Context, graphql.IsTypeOfParams) interface{}
}

// Mutation The root query for implementing GraphQL mutations.
func Mutation() graphql.ObjectConfig {
	return graphql.ObjectConfig{
		Description: "The root query for implementing GraphQL mutations.",
		Fields: graphql.Fields{"createCheck": &graphql.Field{
			Args: graphql.FieldConfigArgument{"input": &graphql.ArgumentConfig{
				Description: "self descriptive",
				Type:        graphql.NewNonNull(util.InputType("CreateCheckInput")),
			}},
			DeprecationReason: "",
			Description:       "Creates a new check.",
			Name:              "createCheck",
			Type:              util.OutputType("CreateCheckPayload"),
		}},
		Interfaces: []*graphql.Interface{},
		IsTypeOf: func(_ graphql.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see MutationResolver.")
		},
		Name: "Mutation",
	}
}

// CreateCheckInput self descriptive
func CreateCheckInput() graphql.InputObjectConfig {
	return graphql.InputObjectConfig{
		Description: "self descriptive",
		Fields: graphql.InputObjectConfigFieldMap{
			"clientMutationId": &graphql.InputObjectFieldConfig{
				Description: "A unique identifier for the client performing the mutation.",
				Type:        graphql.String,
			},
			"command": &graphql.InputObjectFieldConfig{
				Description: "self descriptive",
				Type:        graphql.NewNonNull(graphql.String),
			},
			"name": &graphql.InputObjectFieldConfig{
				Description: "self descriptive",
				Type:        graphql.NewNonNull(graphql.String),
			},
			"ns": &graphql.InputObjectFieldConfig{
				DefaultValue: map[string]interface{}{
					"environment":  "default",
					"organization": "default",
				},
				Description: "namespace the resulting resource will belong to",
				Type:        util.InputType("Namespace"),
			},
		},
		Name: "CreateCheckInput",
	}
}

//
// CreateCheckPayloadResolver represents a collection of methods whose products represent the
// response values of the 'CreateCheckPayload' type.
//
//  == Example SDL
//
//    """
//    Dog's are not hooman.
//    """
//    type Dog implements Pet {
//      "name of this fine beast."
//      name:  String!
//
//      "breed of this silly animal; probably shibe."
//      breed: [Breed]
//    }
//
//  == Example generated interface
//
//   // DogResolver ...
//   type DogResolver interface {
//     // Name implements response to request for name field.
//     Name(context.Context, interface{}, graphql.Params) interface{}
//     // Breed implements response to request for breed field.
//     Breed(context.Context, interface{}, graphql.Params) interface{}
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
//  == Example implementation ...
//
//   // MyDogResolver implements DogResolver interface
//   type MyDogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *MyDogResolver) Name(ctx context.Context, r interface{}, p graphql.Params) interface{} {
//     // ... implementation details ...
//     dog := r.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *MyDogResolver) Name(ctx context.Context, r interface{}, p graphql.Params) interface{} {
//     // ... implementation details ...
//     dog := r.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *MyDogResolver) IsTypeOf(r interface{}, p graphql.IsTypeOfParams) interface{} {
//     // ... implementation details ...
//     _, ok := r.(DogGetter)
//     return ok
//   }
type CreateCheckPayloadResolver interface {
	// clientMutationId implements response to request for 'ClientMutationId' field.
	ClientMutationId(context.Context, interface{}, graphql.Params) interface{}
	// check implements response to request for 'Check' field.
	Check(context.Context, interface{}, graphql.Params) interface{}
	// IsTypeOf is used to determine if a given value is associated with the CreateCheckPayload type
	IsTypeOf(context.Context, graphql.IsTypeOfParams) interface{}
}

// CreateCheckPayload self descriptive
func CreateCheckPayload() graphql.ObjectConfig {
	return graphql.ObjectConfig{
		Description: "self descriptive",
		Fields: graphql.Fields{
			"check": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "The new check.",
				Name:              "check",
				Type:              graphql.NewNonNull(util.OutputType("Check")),
			},
			"clientMutationId": &graphql.Field{
				Args:              graphql.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "A unique identifier for the client performing the mutation.",
				Name:              "clientMutationId",
				Type:              graphql.String,
			},
		},
		Interfaces: []*graphql.Interface{},
		IsTypeOf: func(_ graphql.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CreateCheckPayloadResolver.")
		},
		Name: "CreateCheckPayload",
	}
}
