// Code generated by . DO NOT EDIT.

package schema

import (
	graphql1 "github.com/graphql-go/graphql"
	graphql "github.com/sensu/sensu-go/graphql"
)

// CheckConfigIDFieldResolver implement to resolve requests for the CheckConfig's id field.
type CheckConfigIDFieldResolver interface {
	// ID implements response to request for id field.
	ID(p graphql.ResolveParams) (interface{}, error)
}

// CheckConfigNamespaceFieldResolver implement to resolve requests for the CheckConfig's namespace field.
type CheckConfigNamespaceFieldResolver interface {
	// Namespace implements response to request for namespace field.
	Namespace(p graphql.ResolveParams) (interface{}, error)
}

// CheckConfigNameFieldResolver implement to resolve requests for the CheckConfig's name field.
type CheckConfigNameFieldResolver interface {
	// Name implements response to request for name field.
	Name(p graphql.ResolveParams) (string, error)
}

// CheckConfigCommandFieldResolver implement to resolve requests for the CheckConfig's command field.
type CheckConfigCommandFieldResolver interface {
	// Command implements response to request for command field.
	Command(p graphql.ResolveParams) (string, error)
}

// CheckConfigHandlersFieldResolver implement to resolve requests for the CheckConfig's handlers field.
type CheckConfigHandlersFieldResolver interface {
	// Handlers implements response to request for handlers field.
	Handlers(p graphql.ResolveParams) (interface{}, error)
}

// CheckConfigHighFlapThresholdFieldResolver implement to resolve requests for the CheckConfig's highFlapThreshold field.
type CheckConfigHighFlapThresholdFieldResolver interface {
	// HighFlapThreshold implements response to request for highFlapThreshold field.
	HighFlapThreshold(p graphql.ResolveParams) (int, error)
}

// CheckConfigIntervalFieldResolver implement to resolve requests for the CheckConfig's interval field.
type CheckConfigIntervalFieldResolver interface {
	// Interval implements response to request for interval field.
	Interval(p graphql.ResolveParams) (int, error)
}

// CheckConfigLowFlapThresholdFieldResolver implement to resolve requests for the CheckConfig's lowFlapThreshold field.
type CheckConfigLowFlapThresholdFieldResolver interface {
	// LowFlapThreshold implements response to request for lowFlapThreshold field.
	LowFlapThreshold(p graphql.ResolveParams) (int, error)
}

// CheckConfigPublishFieldResolver implement to resolve requests for the CheckConfig's publish field.
type CheckConfigPublishFieldResolver interface {
	// Publish implements response to request for publish field.
	Publish(p graphql.ResolveParams) (bool, error)
}

// CheckConfigSubscriptionsFieldResolver implement to resolve requests for the CheckConfig's subscriptions field.
type CheckConfigSubscriptionsFieldResolver interface {
	// Subscriptions implements response to request for subscriptions field.
	Subscriptions(p graphql.ResolveParams) (string, error)
}

// CheckConfigSourceFieldResolver implement to resolve requests for the CheckConfig's source field.
type CheckConfigSourceFieldResolver interface {
	// Source implements response to request for source field.
	Source(p graphql.ResolveParams) (string, error)
}

// CheckConfigStdinFieldResolver implement to resolve requests for the CheckConfig's stdin field.
type CheckConfigStdinFieldResolver interface {
	// Stdin implements response to request for stdin field.
	Stdin(p graphql.ResolveParams) (interface{}, error)
}

// CheckConfigCheckHooksFieldResolver implement to resolve requests for the CheckConfig's checkHooks field.
type CheckConfigCheckHooksFieldResolver interface {
	// CheckHooks implements response to request for checkHooks field.
	CheckHooks(p graphql.ResolveParams) (interface{}, error)
}

// CheckConfigSubdueFieldResolver implement to resolve requests for the CheckConfig's subdue field.
type CheckConfigSubdueFieldResolver interface {
	// Subdue implements response to request for subdue field.
	Subdue(p graphql.ResolveParams) (interface{}, error)
}

//
// CheckConfigFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CheckConfig' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type CheckConfigFieldResolvers interface {
	CheckConfigIDFieldResolver
	CheckConfigNamespaceFieldResolver
	CheckConfigNameFieldResolver
	CheckConfigCommandFieldResolver
	CheckConfigHandlersFieldResolver
	CheckConfigHighFlapThresholdFieldResolver
	CheckConfigIntervalFieldResolver
	CheckConfigLowFlapThresholdFieldResolver
	CheckConfigPublishFieldResolver
	CheckConfigSubscriptionsFieldResolver
	CheckConfigSourceFieldResolver
	CheckConfigStdinFieldResolver
	CheckConfigCheckHooksFieldResolver
	CheckConfigSubdueFieldResolver

	// IsTypeOf is used to determine if a given value is associated with the CheckConfig type
	IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
}

// CheckConfigAliases implements all methods on CheckConfigFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type CheckConfigAliases struct{}

// ID implements response to request for 'id' field.
func (_ CheckConfigAliases) ID(p graphql.ResolveParams) (interface{}, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Namespace implements response to request for 'namespace' field.
func (_ CheckConfigAliases) Namespace(p graphql.ResolveParams) (interface{}, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Name implements response to request for 'name' field.
func (_ CheckConfigAliases) Name(p graphql.ResolveParams) (string, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Command implements response to request for 'command' field.
func (_ CheckConfigAliases) Command(p graphql.ResolveParams) (string, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Handlers implements response to request for 'handlers' field.
func (_ CheckConfigAliases) Handlers(p graphql.ResolveParams) (interface{}, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// HighFlapThreshold implements response to request for 'highFlapThreshold' field.
func (_ CheckConfigAliases) HighFlapThreshold(p graphql.ResolveParams) (int, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Interval implements response to request for 'interval' field.
func (_ CheckConfigAliases) Interval(p graphql.ResolveParams) (int, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// LowFlapThreshold implements response to request for 'lowFlapThreshold' field.
func (_ CheckConfigAliases) LowFlapThreshold(p graphql.ResolveParams) (int, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Publish implements response to request for 'publish' field.
func (_ CheckConfigAliases) Publish(p graphql.ResolveParams) (bool, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Subscriptions implements response to request for 'subscriptions' field.
func (_ CheckConfigAliases) Subscriptions(p graphql.ResolveParams) (string, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Source implements response to request for 'source' field.
func (_ CheckConfigAliases) Source(p graphql.ResolveParams) (string, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Stdin implements response to request for 'stdin' field.
func (_ CheckConfigAliases) Stdin(p graphql.ResolveParams) (interface{}, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// CheckHooks implements response to request for 'checkHooks' field.
func (_ CheckConfigAliases) CheckHooks(p graphql.ResolveParams) (interface{}, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Subdue implements response to request for 'subdue' field.
func (_ CheckConfigAliases) Subdue(p graphql.ResolveParams) (interface{}, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// CheckConfigType CheckConfig is the specification of a check.
var CheckConfigType = graphql.NewType("CheckConfig", graphql.ObjectKind)

// RegisterCheckConfig registers CheckConfig object type with given service.
func RegisterCheckConfig(svc graphql.Service, impl CheckConfigFieldResolvers) {
	svc.RegisterObject(_ObjTypeCheckConfigDesc, impl)
}
func _ObjTypeCheckConfigIDHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigIDFieldResolver)
	return resolver.ID
}

func _ObjTypeCheckConfigNamespaceHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigNamespaceFieldResolver)
	return resolver.Namespace
}

func _ObjTypeCheckConfigNameHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigNameFieldResolver)
	return resolver.Name
}

func _ObjTypeCheckConfigCommandHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigCommandFieldResolver)
	return resolver.Command
}

func _ObjTypeCheckConfigHandlersHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigHandlersFieldResolver)
	return resolver.Handlers
}

func _ObjTypeCheckConfigHighFlapThresholdHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigHighFlapThresholdFieldResolver)
	return resolver.HighFlapThreshold
}

func _ObjTypeCheckConfigIntervalHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigIntervalFieldResolver)
	return resolver.Interval
}

func _ObjTypeCheckConfigLowFlapThresholdHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigLowFlapThresholdFieldResolver)
	return resolver.LowFlapThreshold
}

func _ObjTypeCheckConfigPublishHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigPublishFieldResolver)
	return resolver.Publish
}

func _ObjTypeCheckConfigSubscriptionsHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigSubscriptionsFieldResolver)
	return resolver.Subscriptions
}

func _ObjTypeCheckConfigSourceHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigSourceFieldResolver)
	return resolver.Source
}

func _ObjTypeCheckConfigStdinHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigStdinFieldResolver)
	return resolver.Stdin
}

func _ObjTypeCheckConfigCheckHooksHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigCheckHooksFieldResolver)
	return resolver.CheckHooks
}

func _ObjTypeCheckConfigSubdueHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigSubdueFieldResolver)
	return resolver.Subdue
}

func _ObjTypeCheckConfigConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "CheckConfig is the specification of a check.",
		Fields: graphql1.Fields{
			"checkHooks": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "CheckHooks is the list of check hooks for the check",
				Name:              "checkHooks",
				Type:              graphql.OutputType("HookList"),
			},
			"command": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "command is the command to be executed.",
				Name:              "command",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"handlers": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "handlers are the event handler for the check (incidents and/or metrics).",
				Name:              "handlers",
				Type:              graphql1.NewNonNull(graphql1.NewList(graphql.OutputType("Handler"))),
			},
			"highFlapThreshold": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "HighFlapThreshold is the flap detection high threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Name:              "highFlapThreshold",
				Type:              graphql1.Int,
			},
			"id": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "id",
				Type:              graphql1.NewNonNull(graphql.OutputType("ID")),
			},
			"interval": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Interval is the interval, in seconds, at which the check should be run.",
				Name:              "interval",
				Type:              graphql1.NewNonNull(graphql1.Int),
			},
			"lowFlapThreshold": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "LowFlapThreshold is the flap detection low threshold (% state change) for\nthe check. Sensu uses the same flap detection algorithm as Nagios.",
				Name:              "lowFlapThreshold",
				Type:              graphql1.Int,
			},
			"name": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "name is the unique identifier for a check",
				Name:              "name",
				Type:              graphql1.NewNonNull(graphql1.String),
			},
			"namespace": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "self descriptive",
				Name:              "namespace",
				Type:              graphql1.NewNonNull(graphql.OutputType("Namespace")),
			},
			"publish": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Publish indicates if check requests are published for the check",
				Name:              "publish",
				Type:              graphql1.NewNonNull(graphql1.Boolean),
			},
			"source": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Source indicates the name of the entity representing an external resource",
				Name:              "source",
				Type:              graphql1.String,
			},
			"stdin": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "STDIN indicates if the check command accepts JSON via stdin from the agent",
				Name:              "stdin",
				Type:              graphql.OutputType("Bool"),
			},
			"subdue": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Subdue represents one or more time windows when the check should be subdued.",
				Name:              "subdue",
				Type:              graphql.OutputType("TimeWindowWhen"),
			},
			"subscriptions": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Subscriptions is the list of subscribers for the check.",
				Name:              "subscriptions",
				Type:              graphql1.String,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CheckConfigFieldResolvers.")
		},
		Name: "CheckConfig",
	}
}

// describe CheckConfig's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjTypeCheckConfigDesc = graphql.ObjectDesc{
	Config: _ObjTypeCheckConfigConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"CheckHooks":        _ObjTypeCheckConfigCheckHooksHandler,
		"Command":           _ObjTypeCheckConfigCommandHandler,
		"Handlers":          _ObjTypeCheckConfigHandlersHandler,
		"HighFlapThreshold": _ObjTypeCheckConfigHighFlapThresholdHandler,
		"ID":                _ObjTypeCheckConfigIDHandler,
		"Interval":          _ObjTypeCheckConfigIntervalHandler,
		"LowFlapThreshold":  _ObjTypeCheckConfigLowFlapThresholdHandler,
		"Name":              _ObjTypeCheckConfigNameHandler,
		"Namespace":         _ObjTypeCheckConfigNamespaceHandler,
		"Publish":           _ObjTypeCheckConfigPublishHandler,
		"Source":            _ObjTypeCheckConfigSourceHandler,
		"Stdin":             _ObjTypeCheckConfigStdinHandler,
		"Subdue":            _ObjTypeCheckConfigSubdueHandler,
		"Subscriptions":     _ObjTypeCheckConfigSubscriptionsHandler,
	},
}

// CheckConfigFieldResolver implement to resolve requests for the Check's config field.
type CheckConfigFieldResolver interface {
	// Config implements response to request for config field.
	Config(p graphql.ResolveParams) (interface{}, error)
}

// CheckDurationFieldResolver implement to resolve requests for the Check's duration field.
type CheckDurationFieldResolver interface {
	// Duration implements response to request for duration field.
	Duration(p graphql.ResolveParams) (interface{}, error)
}

// CheckExecutedFieldResolver implement to resolve requests for the Check's executed field.
type CheckExecutedFieldResolver interface {
	// Executed implements response to request for executed field.
	Executed(p graphql.ResolveParams) (int, error)
}

// CheckHistoryFieldResolver implement to resolve requests for the Check's history field.
type CheckHistoryFieldResolver interface {
	// History implements response to request for history field.
	History(p graphql.ResolveParams) (interface{}, error)
}

// CheckIssuedFieldResolver implement to resolve requests for the Check's issued field.
type CheckIssuedFieldResolver interface {
	// Issued implements response to request for issued field.
	Issued(p graphql.ResolveParams) (int, error)
}

// CheckOutputFieldResolver implement to resolve requests for the Check's output field.
type CheckOutputFieldResolver interface {
	// Output implements response to request for output field.
	Output(p graphql.ResolveParams) (string, error)
}

// CheckStateFieldResolver implement to resolve requests for the Check's state field.
type CheckStateFieldResolver interface {
	// State implements response to request for state field.
	State(p graphql.ResolveParams) (string, error)
}

// CheckStatusFieldResolver implement to resolve requests for the Check's status field.
type CheckStatusFieldResolver interface {
	// Status implements response to request for status field.
	Status(p graphql.ResolveParams) (int, error)
}

// CheckTotalStateChangeFieldResolver implement to resolve requests for the Check's totalStateChange field.
type CheckTotalStateChangeFieldResolver interface {
	// TotalStateChange implements response to request for totalStateChange field.
	TotalStateChange(p graphql.ResolveParams) (int, error)
}

//
// CheckFieldResolvers represents a collection of methods whose products represent the
// response values of the 'Check' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type CheckFieldResolvers interface {
	CheckConfigFieldResolver
	CheckDurationFieldResolver
	CheckExecutedFieldResolver
	CheckHistoryFieldResolver
	CheckIssuedFieldResolver
	CheckOutputFieldResolver
	CheckStateFieldResolver
	CheckStatusFieldResolver
	CheckTotalStateChangeFieldResolver

	// IsTypeOf is used to determine if a given value is associated with the Check type
	IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
}

// CheckAliases implements all methods on CheckFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type CheckAliases struct{}

// Config implements response to request for 'config' field.
func (_ CheckAliases) Config(p graphql.ResolveParams) (interface{}, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Duration implements response to request for 'duration' field.
func (_ CheckAliases) Duration(p graphql.ResolveParams) (interface{}, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Executed implements response to request for 'executed' field.
func (_ CheckAliases) Executed(p graphql.ResolveParams) (int, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// History implements response to request for 'history' field.
func (_ CheckAliases) History(p graphql.ResolveParams) (interface{}, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Issued implements response to request for 'issued' field.
func (_ CheckAliases) Issued(p graphql.ResolveParams) (int, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Output implements response to request for 'output' field.
func (_ CheckAliases) Output(p graphql.ResolveParams) (string, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// State implements response to request for 'state' field.
func (_ CheckAliases) State(p graphql.ResolveParams) (string, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Status implements response to request for 'status' field.
func (_ CheckAliases) Status(p graphql.ResolveParams) (int, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// TotalStateChange implements response to request for 'totalStateChange' field.
func (_ CheckAliases) TotalStateChange(p graphql.ResolveParams) (int, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

/*
CheckType A Check is a check specification and optionally the results of the check's
execution.
*/
var CheckType = graphql.NewType("Check", graphql.ObjectKind)

// RegisterCheck registers Check object type with given service.
func RegisterCheck(svc graphql.Service, impl CheckFieldResolvers) {
	svc.RegisterObject(_ObjTypeCheckDesc, impl)
}
func _ObjTypeCheckConfigHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckConfigFieldResolver)
	return resolver.Config
}

func _ObjTypeCheckDurationHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckDurationFieldResolver)
	return resolver.Duration
}

func _ObjTypeCheckExecutedHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckExecutedFieldResolver)
	return resolver.Executed
}

func _ObjTypeCheckHistoryHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckHistoryFieldResolver)
	return resolver.History
}

func _ObjTypeCheckIssuedHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckIssuedFieldResolver)
	return resolver.Issued
}

func _ObjTypeCheckOutputHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckOutputFieldResolver)
	return resolver.Output
}

func _ObjTypeCheckStateHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckStateFieldResolver)
	return resolver.State
}

func _ObjTypeCheckStatusHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckStatusFieldResolver)
	return resolver.Status
}

func _ObjTypeCheckTotalStateChangeHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckTotalStateChangeFieldResolver)
	return resolver.TotalStateChange
}

func _ObjTypeCheckConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "A Check is a check specification and optionally the results of the check's\nexecution.",
		Fields: graphql1.Fields{
			"config": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Config is the specification of a check",
				Name:              "config",
				Type:              graphql.OutputType("CheckConfig"),
			},
			"duration": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Duration of execution",
				Name:              "duration",
				Type:              graphql.OutputType("double"),
			},
			"executed": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Executed describes the time in which the check request was executed",
				Name:              "executed",
				Type:              graphql1.Int,
			},
			"history": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "History is the check state history.",
				Name:              "history",
				Type:              graphql.OutputType("CheckHistory"),
			},
			"issued": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Issued describes the time in which the check request was issued",
				Name:              "issued",
				Type:              graphql1.Int,
			},
			"output": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Output from the execution of Command",
				Name:              "output",
				Type:              graphql1.String,
			},
			"state": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "State provides handlers with more information about the state change",
				Name:              "state",
				Type:              graphql1.String,
			},
			"status": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Status is the exit status code produced by the check",
				Name:              "status",
				Type:              graphql1.Int,
			},
			"totalStateChange": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "TotalStateChange indicates the total state change percentage for the\ncheck's history",
				Name:              "totalStateChange",
				Type:              graphql1.Int,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CheckFieldResolvers.")
		},
		Name: "Check",
	}
}

// describe Check's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjTypeCheckDesc = graphql.ObjectDesc{
	Config: _ObjTypeCheckConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"Config":           _ObjTypeCheckConfigHandler,
		"Duration":         _ObjTypeCheckDurationHandler,
		"Executed":         _ObjTypeCheckExecutedHandler,
		"History":          _ObjTypeCheckHistoryHandler,
		"Issued":           _ObjTypeCheckIssuedHandler,
		"Output":           _ObjTypeCheckOutputHandler,
		"State":            _ObjTypeCheckStateHandler,
		"Status":           _ObjTypeCheckStatusHandler,
		"TotalStateChange": _ObjTypeCheckTotalStateChangeHandler,
	},
}

// CheckHistoryStatusFieldResolver implement to resolve requests for the CheckHistory's status field.
type CheckHistoryStatusFieldResolver interface {
	// Status implements response to request for status field.
	Status(p graphql.ResolveParams) (int, error)
}

// CheckHistoryExecutedFieldResolver implement to resolve requests for the CheckHistory's executed field.
type CheckHistoryExecutedFieldResolver interface {
	// Executed implements response to request for executed field.
	Executed(p graphql.ResolveParams) (int, error)
}

//
// CheckHistoryFieldResolvers represents a collection of methods whose products represent the
// response values of the 'CheckHistory' type.
//
// == Example SDL
//
//   """
//   Dog's are not hooman.
//   """
//   type Dog implements Pet {
//     "name of this fine beast."
//     name:  String!
//
//     "breed of this silly animal; probably shibe."
//     breed: [Breed]
//   }
//
// == Example generated interface
//
//   // DogResolver ...
//   type DogFieldResolvers interface {
//     DogNameFieldResolver
//     DogBreedFieldResolver
//
//     // IsTypeOf is used to determine if a given value is associated with the Dog type
//     IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
//   }
//
// == Example implementation ...
//
//   // DogResolver implements DogFieldResolvers interface
//   type DogResolver struct {
//     logger logrus.LogEntry
//     store interface{
//       store.BreedStore
//       store.DogStore
//     }
//   }
//
//   // Name implements response to request for name field.
//   func (r *DogResolver) Name(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     return dog.GetName()
//   }
//
//   // Breed implements response to request for breed field.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // ... implementation details ...
//     dog := p.Source.(DogGetter)
//     breed := r.store.GetBreed(dog.GetBreedName())
//     return breed
//   }
//
//   // IsTypeOf is used to determine if a given value is associated with the Dog type
//   func (r *DogResolver) IsTypeOf(p graphql.IsTypeOfParams) bool {
//     // ... implementation details ...
//     _, ok := p.Value.(DogGetter)
//     return ok
//   }
//
type CheckHistoryFieldResolvers interface {
	CheckHistoryStatusFieldResolver
	CheckHistoryExecutedFieldResolver

	// IsTypeOf is used to determine if a given value is associated with the CheckHistory type
	IsTypeOf(interface{}, graphql.IsTypeOfParams) bool
}

// CheckHistoryAliases implements all methods on CheckHistoryFieldResolvers interface by using reflection to
// match name of field to a field on the given value. Intent is reduce friction
// of writing new resolvers by removing all the instances where you would simply
// have the resolvers method return a field.
//
// == Example SDL
//
//    type Dog {
//      name:   String!
//      weight: Float!
//      dob:    DateTime
//      breed:  [Breed]
//    }
//
// == Example generated aliases
//
//   type DogAliases struct {}
//   func (_ DogAliases) Name(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Weight(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Dob(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//   func (_ DogAliases) Breed(p graphql.ResolveParams) (interface{}, error) {
//     // reflect...
//   }
//
// == Example Implementation
//
//   type DogResolver struct { // Implements DogResolver
//     DogAliases
//     store store.BreedStore
//   }
//
//   // NOTE:
//   // All other fields are satisified by DogAliases but since this one
//   // requires hitting the store we implement it in our resolver.
//   func (r *DogResolver) Breed(p graphql.ResolveParams) interface{} {
//     dog := v.(*Dog)
//     return r.BreedsById(dog.BreedIDs)
//   }
//
type CheckHistoryAliases struct{}

// Status implements response to request for 'status' field.
func (_ CheckHistoryAliases) Status(p graphql.ResolveParams) (int, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// Executed implements response to request for 'executed' field.
func (_ CheckHistoryAliases) Executed(p graphql.ResolveParams) (int, error) {
	return graphql.DefaultResolver(p.Source, p.Info.FieldName)
}

// CheckHistoryType CheckHistory is a record of a check execution and its status
var CheckHistoryType = graphql.NewType("CheckHistory", graphql.ObjectKind)

// RegisterCheckHistory registers CheckHistory object type with given service.
func RegisterCheckHistory(svc graphql.Service, impl CheckHistoryFieldResolvers) {
	svc.RegisterObject(_ObjTypeCheckHistoryDesc, impl)
}
func _ObjTypeCheckHistoryStatusHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckHistoryStatusFieldResolver)
	return resolver.Status
}

func _ObjTypeCheckHistoryExecutedHandler(impl interface{}) graphql1.FieldResolveFn {
	resolver := impl.(CheckHistoryExecutedFieldResolver)
	return resolver.Executed
}

func _ObjTypeCheckHistoryConfigFn() graphql1.ObjectConfig {
	return graphql1.ObjectConfig{
		Description: "CheckHistory is a record of a check execution and its status",
		Fields: graphql1.Fields{
			"executed": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Executed describes the time in which the check request was executed",
				Name:              "executed",
				Type:              graphql1.Int,
			},
			"status": &graphql1.Field{
				Args:              graphql1.FieldConfigArgument{},
				DeprecationReason: "",
				Description:       "Status is the exit status code produced by the check.",
				Name:              "status",
				Type:              graphql1.Int,
			},
		},
		Interfaces: []*graphql1.Interface{},
		IsTypeOf: func(_ graphql1.IsTypeOfParams) bool {
			// NOTE:
			// Panic by default. Intent is that when Service is invoked, values of
			// these fields are updated with instantiated resolvers. If these
			// defaults are called it is most certainly programmer err.
			// If you're see this comment then: 'Whoops! Sorry, my bad.'
			panic("Unimplemented; see CheckHistoryFieldResolvers.")
		},
		Name: "CheckHistory",
	}
}

// describe CheckHistory's configuration; kept private to avoid unintentional tampering of configuration at runtime.
var _ObjTypeCheckHistoryDesc = graphql.ObjectDesc{
	Config: _ObjTypeCheckHistoryConfigFn,
	FieldHandlers: map[string]graphql.FieldHandler{
		"Executed": _ObjTypeCheckHistoryExecutedHandler,
		"Status":   _ObjTypeCheckHistoryStatusHandler,
	},
}
