// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: filter.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// EventFilter is a filter specification.
type EventFilter struct {
	// Name is the unique identifier for a filter
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Action specifies to allow/deny events to continue through the pipeline
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// Statements is an array of boolean expressions that are &&'d together
	// to determine if the event matches this filter.
	Statements []string `protobuf:"bytes,3,rep,name=statements" json:"statements"`
	// Environment indicates to which env a filter belongs to
	Environment string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
	// Organization indicates to which org a filter belongs to
	Organization string `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (m *EventFilter) Reset()                    { *m = EventFilter{} }
func (m *EventFilter) String() string            { return proto.CompactTextString(m) }
func (*EventFilter) ProtoMessage()               {}
func (*EventFilter) Descriptor() ([]byte, []int) { return fileDescriptorFilter, []int{0} }

func (m *EventFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventFilter) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *EventFilter) GetStatements() []string {
	if m != nil {
		return m.Statements
	}
	return nil
}

func (m *EventFilter) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *EventFilter) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

// EventFilterWhenAttributes is the specification for "when" attributes in a filter.
type EventFilterWhenAttributes struct {
	// Days is an array of EventFilterWhenDaysAttributes
	Days []EventFilterWhenDays `protobuf:"bytes,1,rep,name=days" json:"days"`
}

func (m *EventFilterWhenAttributes) Reset()                    { *m = EventFilterWhenAttributes{} }
func (m *EventFilterWhenAttributes) String() string            { return proto.CompactTextString(m) }
func (*EventFilterWhenAttributes) ProtoMessage()               {}
func (*EventFilterWhenAttributes) Descriptor() ([]byte, []int) { return fileDescriptorFilter, []int{1} }

func (m *EventFilterWhenAttributes) GetDays() []EventFilterWhenDays {
	if m != nil {
		return m.Days
	}
	return nil
}

// EventFilterWhenDays is the specification for which days to use in a "when" filter.
type EventFilterWhenDays struct {
	All       []*EventFilterWhenTimeRange `protobuf:"bytes,1,rep,name=all" json:"all,omitempty"`
	Sunday    []*EventFilterWhenTimeRange `protobuf:"bytes,2,rep,name=sunday" json:"sunday,omitempty"`
	Monday    []*EventFilterWhenTimeRange `protobuf:"bytes,3,rep,name=monday" json:"monday,omitempty"`
	Tuesday   []*EventFilterWhenTimeRange `protobuf:"bytes,4,rep,name=tuesday" json:"tuesday,omitempty"`
	Wednesday []*EventFilterWhenTimeRange `protobuf:"bytes,5,rep,name=wednesday" json:"wednesday,omitempty"`
	Thursday  []*EventFilterWhenTimeRange `protobuf:"bytes,6,rep,name=thursday" json:"thursday,omitempty"`
	Friday    []*EventFilterWhenTimeRange `protobuf:"bytes,7,rep,name=friday" json:"friday,omitempty"`
	Saturday  []*EventFilterWhenTimeRange `protobuf:"bytes,8,rep,name=saturday" json:"saturday,omitempty"`
}

func (m *EventFilterWhenDays) Reset()                    { *m = EventFilterWhenDays{} }
func (m *EventFilterWhenDays) String() string            { return proto.CompactTextString(m) }
func (*EventFilterWhenDays) ProtoMessage()               {}
func (*EventFilterWhenDays) Descriptor() ([]byte, []int) { return fileDescriptorFilter, []int{2} }

func (m *EventFilterWhenDays) GetAll() []*EventFilterWhenTimeRange {
	if m != nil {
		return m.All
	}
	return nil
}

func (m *EventFilterWhenDays) GetSunday() []*EventFilterWhenTimeRange {
	if m != nil {
		return m.Sunday
	}
	return nil
}

func (m *EventFilterWhenDays) GetMonday() []*EventFilterWhenTimeRange {
	if m != nil {
		return m.Monday
	}
	return nil
}

func (m *EventFilterWhenDays) GetTuesday() []*EventFilterWhenTimeRange {
	if m != nil {
		return m.Tuesday
	}
	return nil
}

func (m *EventFilterWhenDays) GetWednesday() []*EventFilterWhenTimeRange {
	if m != nil {
		return m.Wednesday
	}
	return nil
}

func (m *EventFilterWhenDays) GetThursday() []*EventFilterWhenTimeRange {
	if m != nil {
		return m.Thursday
	}
	return nil
}

func (m *EventFilterWhenDays) GetFriday() []*EventFilterWhenTimeRange {
	if m != nil {
		return m.Friday
	}
	return nil
}

func (m *EventFilterWhenDays) GetSaturday() []*EventFilterWhenTimeRange {
	if m != nil {
		return m.Saturday
	}
	return nil
}

// EventFilterWhenTimeRange is the specification for time ranges in a "when" filter.
type EventFilterWhenTimeRange struct {
	// Begin is the time which the filter should begin
	Begin string `protobuf:"bytes,1,opt,name=begin,proto3" json:"begin"`
	// End is the time which the filter should end
	End string `protobuf:"bytes,2,opt,name=end,proto3" json:"end"`
}

func (m *EventFilterWhenTimeRange) Reset()                    { *m = EventFilterWhenTimeRange{} }
func (m *EventFilterWhenTimeRange) String() string            { return proto.CompactTextString(m) }
func (*EventFilterWhenTimeRange) ProtoMessage()               {}
func (*EventFilterWhenTimeRange) Descriptor() ([]byte, []int) { return fileDescriptorFilter, []int{3} }

func (m *EventFilterWhenTimeRange) GetBegin() string {
	if m != nil {
		return m.Begin
	}
	return ""
}

func (m *EventFilterWhenTimeRange) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func init() {
	proto.RegisterType((*EventFilter)(nil), "sensu.types.EventFilter")
	proto.RegisterType((*EventFilterWhenAttributes)(nil), "sensu.types.EventFilterWhenAttributes")
	proto.RegisterType((*EventFilterWhenDays)(nil), "sensu.types.EventFilterWhenDays")
	proto.RegisterType((*EventFilterWhenTimeRange)(nil), "sensu.types.EventFilterWhenTimeRange")
}
func (this *EventFilter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EventFilter)
	if !ok {
		that2, ok := that.(EventFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if len(this.Statements) != len(that1.Statements) {
		return false
	}
	for i := range this.Statements {
		if this.Statements[i] != that1.Statements[i] {
			return false
		}
	}
	if this.Environment != that1.Environment {
		return false
	}
	if this.Organization != that1.Organization {
		return false
	}
	return true
}
func (this *EventFilterWhenAttributes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EventFilterWhenAttributes)
	if !ok {
		that2, ok := that.(EventFilterWhenAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Days) != len(that1.Days) {
		return false
	}
	for i := range this.Days {
		if !this.Days[i].Equal(&that1.Days[i]) {
			return false
		}
	}
	return true
}
func (this *EventFilterWhenDays) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EventFilterWhenDays)
	if !ok {
		that2, ok := that.(EventFilterWhenDays)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.All) != len(that1.All) {
		return false
	}
	for i := range this.All {
		if !this.All[i].Equal(that1.All[i]) {
			return false
		}
	}
	if len(this.Sunday) != len(that1.Sunday) {
		return false
	}
	for i := range this.Sunday {
		if !this.Sunday[i].Equal(that1.Sunday[i]) {
			return false
		}
	}
	if len(this.Monday) != len(that1.Monday) {
		return false
	}
	for i := range this.Monday {
		if !this.Monday[i].Equal(that1.Monday[i]) {
			return false
		}
	}
	if len(this.Tuesday) != len(that1.Tuesday) {
		return false
	}
	for i := range this.Tuesday {
		if !this.Tuesday[i].Equal(that1.Tuesday[i]) {
			return false
		}
	}
	if len(this.Wednesday) != len(that1.Wednesday) {
		return false
	}
	for i := range this.Wednesday {
		if !this.Wednesday[i].Equal(that1.Wednesday[i]) {
			return false
		}
	}
	if len(this.Thursday) != len(that1.Thursday) {
		return false
	}
	for i := range this.Thursday {
		if !this.Thursday[i].Equal(that1.Thursday[i]) {
			return false
		}
	}
	if len(this.Friday) != len(that1.Friday) {
		return false
	}
	for i := range this.Friday {
		if !this.Friday[i].Equal(that1.Friday[i]) {
			return false
		}
	}
	if len(this.Saturday) != len(that1.Saturday) {
		return false
	}
	for i := range this.Saturday {
		if !this.Saturday[i].Equal(that1.Saturday[i]) {
			return false
		}
	}
	return true
}
func (this *EventFilterWhenTimeRange) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EventFilterWhenTimeRange)
	if !ok {
		that2, ok := that.(EventFilterWhenTimeRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Begin != that1.Begin {
		return false
	}
	if this.End != that1.End {
		return false
	}
	return true
}
func (m *EventFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFilter(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFilter(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if len(m.Statements) > 0 {
		for _, s := range m.Statements {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFilter(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	if len(m.Organization) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFilter(dAtA, i, uint64(len(m.Organization)))
		i += copy(dAtA[i:], m.Organization)
	}
	return i, nil
}

func (m *EventFilterWhenAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFilterWhenAttributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Days) > 0 {
		for _, msg := range m.Days {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFilter(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EventFilterWhenDays) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFilterWhenDays) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.All) > 0 {
		for _, msg := range m.All {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFilter(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Sunday) > 0 {
		for _, msg := range m.Sunday {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFilter(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Monday) > 0 {
		for _, msg := range m.Monday {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintFilter(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tuesday) > 0 {
		for _, msg := range m.Tuesday {
			dAtA[i] = 0x22
			i++
			i = encodeVarintFilter(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Wednesday) > 0 {
		for _, msg := range m.Wednesday {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintFilter(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Thursday) > 0 {
		for _, msg := range m.Thursday {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFilter(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Friday) > 0 {
		for _, msg := range m.Friday {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintFilter(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Saturday) > 0 {
		for _, msg := range m.Saturday {
			dAtA[i] = 0x42
			i++
			i = encodeVarintFilter(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EventFilterWhenTimeRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFilterWhenTimeRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Begin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFilter(dAtA, i, uint64(len(m.Begin)))
		i += copy(dAtA[i:], m.Begin)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFilter(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	return i, nil
}

func encodeVarintFilter(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedEventFilter(r randyFilter, easy bool) *EventFilter {
	this := &EventFilter{}
	this.Name = string(randStringFilter(r))
	this.Action = string(randStringFilter(r))
	v1 := r.Intn(10)
	this.Statements = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Statements[i] = string(randStringFilter(r))
	}
	this.Environment = string(randStringFilter(r))
	this.Organization = string(randStringFilter(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEventFilterWhenAttributes(r randyFilter, easy bool) *EventFilterWhenAttributes {
	this := &EventFilterWhenAttributes{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Days = make([]EventFilterWhenDays, v2)
		for i := 0; i < v2; i++ {
			v3 := NewPopulatedEventFilterWhenDays(r, easy)
			this.Days[i] = *v3
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEventFilterWhenDays(r randyFilter, easy bool) *EventFilterWhenDays {
	this := &EventFilterWhenDays{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.All = make([]*EventFilterWhenTimeRange, v4)
		for i := 0; i < v4; i++ {
			this.All[i] = NewPopulatedEventFilterWhenTimeRange(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Sunday = make([]*EventFilterWhenTimeRange, v5)
		for i := 0; i < v5; i++ {
			this.Sunday[i] = NewPopulatedEventFilterWhenTimeRange(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Monday = make([]*EventFilterWhenTimeRange, v6)
		for i := 0; i < v6; i++ {
			this.Monday[i] = NewPopulatedEventFilterWhenTimeRange(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Tuesday = make([]*EventFilterWhenTimeRange, v7)
		for i := 0; i < v7; i++ {
			this.Tuesday[i] = NewPopulatedEventFilterWhenTimeRange(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Wednesday = make([]*EventFilterWhenTimeRange, v8)
		for i := 0; i < v8; i++ {
			this.Wednesday[i] = NewPopulatedEventFilterWhenTimeRange(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.Thursday = make([]*EventFilterWhenTimeRange, v9)
		for i := 0; i < v9; i++ {
			this.Thursday[i] = NewPopulatedEventFilterWhenTimeRange(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Friday = make([]*EventFilterWhenTimeRange, v10)
		for i := 0; i < v10; i++ {
			this.Friday[i] = NewPopulatedEventFilterWhenTimeRange(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Saturday = make([]*EventFilterWhenTimeRange, v11)
		for i := 0; i < v11; i++ {
			this.Saturday[i] = NewPopulatedEventFilterWhenTimeRange(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEventFilterWhenTimeRange(r randyFilter, easy bool) *EventFilterWhenTimeRange {
	this := &EventFilterWhenTimeRange{}
	this.Begin = string(randStringFilter(r))
	this.End = string(randStringFilter(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyFilter interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneFilter(r randyFilter) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringFilter(r randyFilter) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneFilter(r)
	}
	return string(tmps)
}
func randUnrecognizedFilter(r randyFilter, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldFilter(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldFilter(dAtA []byte, r randyFilter, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateFilter(dAtA, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		dAtA = encodeVarintPopulateFilter(dAtA, uint64(v13))
	case 1:
		dAtA = encodeVarintPopulateFilter(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateFilter(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateFilter(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateFilter(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateFilter(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *EventFilter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFilter(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovFilter(uint64(l))
	}
	if len(m.Statements) > 0 {
		for _, s := range m.Statements {
			l = len(s)
			n += 1 + l + sovFilter(uint64(l))
		}
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovFilter(uint64(l))
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovFilter(uint64(l))
	}
	return n
}

func (m *EventFilterWhenAttributes) Size() (n int) {
	var l int
	_ = l
	if len(m.Days) > 0 {
		for _, e := range m.Days {
			l = e.Size()
			n += 1 + l + sovFilter(uint64(l))
		}
	}
	return n
}

func (m *EventFilterWhenDays) Size() (n int) {
	var l int
	_ = l
	if len(m.All) > 0 {
		for _, e := range m.All {
			l = e.Size()
			n += 1 + l + sovFilter(uint64(l))
		}
	}
	if len(m.Sunday) > 0 {
		for _, e := range m.Sunday {
			l = e.Size()
			n += 1 + l + sovFilter(uint64(l))
		}
	}
	if len(m.Monday) > 0 {
		for _, e := range m.Monday {
			l = e.Size()
			n += 1 + l + sovFilter(uint64(l))
		}
	}
	if len(m.Tuesday) > 0 {
		for _, e := range m.Tuesday {
			l = e.Size()
			n += 1 + l + sovFilter(uint64(l))
		}
	}
	if len(m.Wednesday) > 0 {
		for _, e := range m.Wednesday {
			l = e.Size()
			n += 1 + l + sovFilter(uint64(l))
		}
	}
	if len(m.Thursday) > 0 {
		for _, e := range m.Thursday {
			l = e.Size()
			n += 1 + l + sovFilter(uint64(l))
		}
	}
	if len(m.Friday) > 0 {
		for _, e := range m.Friday {
			l = e.Size()
			n += 1 + l + sovFilter(uint64(l))
		}
	}
	if len(m.Saturday) > 0 {
		for _, e := range m.Saturday {
			l = e.Size()
			n += 1 + l + sovFilter(uint64(l))
		}
	}
	return n
}

func (m *EventFilterWhenTimeRange) Size() (n int) {
	var l int
	_ = l
	l = len(m.Begin)
	if l > 0 {
		n += 1 + l + sovFilter(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovFilter(uint64(l))
	}
	return n
}

func sovFilter(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFilter(x uint64) (n int) {
	return sovFilter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statements", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statements = append(m.Statements, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFilterWhenAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFilterWhenAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFilterWhenAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Days = append(m.Days, EventFilterWhenDays{})
			if err := m.Days[len(m.Days)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFilterWhenDays) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFilterWhenDays: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFilterWhenDays: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.All = append(m.All, &EventFilterWhenTimeRange{})
			if err := m.All[len(m.All)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sunday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sunday = append(m.Sunday, &EventFilterWhenTimeRange{})
			if err := m.Sunday[len(m.Sunday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Monday = append(m.Monday, &EventFilterWhenTimeRange{})
			if err := m.Monday[len(m.Monday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tuesday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tuesday = append(m.Tuesday, &EventFilterWhenTimeRange{})
			if err := m.Tuesday[len(m.Tuesday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wednesday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wednesday = append(m.Wednesday, &EventFilterWhenTimeRange{})
			if err := m.Wednesday[len(m.Wednesday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thursday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thursday = append(m.Thursday, &EventFilterWhenTimeRange{})
			if err := m.Thursday[len(m.Thursday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friday = append(m.Friday, &EventFilterWhenTimeRange{})
			if err := m.Friday[len(m.Friday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Saturday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Saturday = append(m.Saturday, &EventFilterWhenTimeRange{})
			if err := m.Saturday[len(m.Saturday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFilterWhenTimeRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFilterWhenTimeRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFilterWhenTimeRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Begin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFilter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFilter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFilter(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFilter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilter   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("filter.proto", fileDescriptorFilter) }

var fileDescriptorFilter = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0x80, 0x77, 0x36, 0x69, 0xbb, 0x7d, 0x2d, 0x1e, 0x46, 0x90, 0xac, 0x87, 0x24, 0x44, 0x84,
	0x5e, 0xcc, 0x82, 0x9e, 0x3d, 0x18, 0x5d, 0xc5, 0x6b, 0x10, 0x05, 0x2f, 0x32, 0xd9, 0x4e, 0xd3,
	0x81, 0x66, 0x66, 0xc9, 0x4c, 0x56, 0xea, 0x2f, 0xf1, 0x27, 0x78, 0xf3, 0xea, 0x3f, 0xb0, 0x47,
	0x7f, 0x41, 0xd0, 0x78, 0xeb, 0x2f, 0xf0, 0x28, 0xf3, 0xd2, 0x6a, 0x14, 0x5d, 0x48, 0x2f, 0x93,
	0xf7, 0x1e, 0xef, 0xfb, 0xf2, 0x78, 0xf0, 0x60, 0xba, 0x10, 0x2b, 0xc3, 0xcb, 0xf8, 0xb2, 0x54,
	0x46, 0xd1, 0x89, 0xe6, 0x52, 0x57, 0xb1, 0x59, 0x5f, 0x72, 0x7d, 0xfb, 0x5e, 0x2e, 0xcc, 0xb2,
	0xca, 0xe2, 0x0b, 0x55, 0x9c, 0xe5, 0x2a, 0x57, 0x67, 0xd8, 0x93, 0x55, 0x0b, 0xcc, 0x30, 0xc1,
	0xa8, 0x65, 0xa3, 0x8f, 0x04, 0x26, 0xe7, 0x57, 0x5c, 0x9a, 0xa7, 0x68, 0xa4, 0x14, 0x5c, 0xc9,
	0x0a, 0xee, 0x91, 0x90, 0xcc, 0xc6, 0x29, 0xc6, 0xf4, 0x16, 0x0c, 0xd9, 0x85, 0x11, 0x4a, 0x7a,
	0xc7, 0x58, 0xdd, 0x65, 0x34, 0x06, 0xd0, 0x86, 0x19, 0x5e, 0x70, 0x69, 0xb4, 0xe7, 0x84, 0xce,
	0x6c, 0x9c, 0xdc, 0xd8, 0xd6, 0x41, 0xa7, 0x9a, 0x76, 0x62, 0x1a, 0xc2, 0x84, 0xcb, 0x2b, 0x51,
	0x2a, 0x69, 0x73, 0xcf, 0x45, 0x59, 0xb7, 0x44, 0x23, 0x98, 0xaa, 0x32, 0x67, 0x52, 0xbc, 0x63,
	0xf8, 0xbf, 0x01, 0xb6, 0xfc, 0x51, 0x8b, 0xde, 0xc0, 0x69, 0x67, 0xe0, 0x57, 0x4b, 0x2e, 0x1f,
	0x19, 0x53, 0x8a, 0xac, 0x32, 0x5c, 0xd3, 0x04, 0xdc, 0x39, 0x5b, 0x6b, 0x8f, 0x84, 0xce, 0x6c,
	0x72, 0x3f, 0x8c, 0x3b, 0x9b, 0x89, 0xff, 0xa2, 0x9e, 0xb0, 0xb5, 0x4e, 0xa6, 0x9b, 0x3a, 0x38,
	0xda, 0xd6, 0x01, 0x52, 0x29, 0xbe, 0xd1, 0x67, 0x17, 0x6e, 0xfe, 0xa3, 0x97, 0x3e, 0x04, 0x87,
	0xad, 0x56, 0x3b, 0xf5, 0xdd, 0xeb, 0xd4, 0x2f, 0x44, 0xc1, 0x53, 0x26, 0x73, 0x9e, 0xb8, 0x9b,
	0x3a, 0x20, 0xa9, 0xe5, 0xe8, 0x63, 0x18, 0xea, 0x4a, 0xce, 0xd9, 0xda, 0x3b, 0xee, 0x6f, 0xd8,
	0xa1, 0x56, 0x52, 0x28, 0x94, 0x38, 0x07, 0x48, 0x5a, 0x94, 0x9e, 0xc3, 0xc8, 0x54, 0x5c, 0x5b,
	0x8b, 0xdb, 0xdf, 0xb2, 0x67, 0xe9, 0x73, 0x18, 0xbf, 0xe5, 0x73, 0xd9, 0x8a, 0x06, 0xfd, 0x45,
	0xbf, 0x69, 0xfa, 0x0c, 0x4e, 0xcc, 0xb2, 0x2a, 0xd1, 0x34, 0xec, 0x6f, 0xfa, 0x05, 0xdb, 0xfd,
	0x2c, 0x4a, 0x61, 0x35, 0xa3, 0x03, 0xf6, 0xd3, 0xa2, 0x76, 0x1a, 0xcd, 0x4c, 0x55, 0x5a, 0xcd,
	0xc9, 0x01, 0xd3, 0xec, 0xe1, 0xe8, 0x25, 0x78, 0xff, 0xeb, 0xa5, 0x01, 0x0c, 0x32, 0x9e, 0x0b,
	0xd9, 0x5e, 0x5a, 0x32, 0xde, 0xd6, 0x41, 0x5b, 0x48, 0xdb, 0x0f, 0x3d, 0x05, 0x87, 0xcb, 0x79,
	0x7b, 0x72, 0xc9, 0x68, 0x5b, 0x07, 0x36, 0x4d, 0xed, 0x93, 0xdc, 0xf9, 0xf1, 0xcd, 0x27, 0x1f,
	0x1a, 0x9f, 0x7c, 0x6a, 0x7c, 0xb2, 0x69, 0x7c, 0xf2, 0xa5, 0xf1, 0xc9, 0xd7, 0xc6, 0x27, 0xef,
	0xbf, 0xfb, 0x47, 0xaf, 0x07, 0x38, 0x65, 0x36, 0xc4, 0x03, 0x7f, 0xf0, 0x33, 0x00, 0x00, 0xff,
	0xff, 0x18, 0xb0, 0x17, 0xa1, 0x2c, 0x04, 0x00, 0x00,
}
