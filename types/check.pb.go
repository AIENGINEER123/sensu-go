// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: check.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A CheckRequest represents a request to execute a check
type CheckRequest struct {
	// Config is the specification of a check.
	Config *CheckConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// Assets are a list of assets required to execute check.
	Assets []Asset `protobuf:"bytes,2,rep,name=assets" json:"assets"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptorCheck, []int{0} }

func (m *CheckRequest) GetConfig() *CheckConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CheckRequest) GetAssets() []Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

// CheckConfig is the specification of a check.
type CheckConfig struct {
	// Command is the command to be executed.
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Environment indicates to which env a check belongs to
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	// Handlers are the event handler for the check (incidents and/or metrics).
	Handlers []string `protobuf:"bytes,3,rep,name=handlers" json:"handlers"`
	// HighFlapThreshold is the flap detection high threshold (% state change) for
	// the check. Sensu uses the same flap detection algorithm as Nagios.
	HighFlapThreshold uint32 `protobuf:"varint,4,opt,name=high_flap_threshold,json=highFlapThreshold,proto3" json:"high_flap_threshold,omitempty"`
	// Interval is the interval, in seconds, at which the check should be run.
	Interval uint32 `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`
	// LowFlapThreshold is the flap detection low threshold (% state change) for
	// the check. Sensu uses the same flap detection algorithm as Nagios.
	LowFlapThreshold uint32 `protobuf:"varint,6,opt,name=low_flap_threshold,json=lowFlapThreshold,proto3" json:"low_flap_threshold,omitempty"`
	// Name is the unique identifier for a check.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// Organization indicates to which org a check belongs to
	Organization string `protobuf:"bytes,8,opt,name=organization,proto3" json:"organization,omitempty"`
	// Publish indicates if check requests are published for the check
	Publish bool `protobuf:"varint,9,opt,name=publish,proto3" json:"publish,omitempty"`
	// RuntimeAssets are a list of assets required to execute check.
	RuntimeAssets []string `protobuf:"bytes,10,rep,name=runtime_assets,json=runtimeAssets" json:"runtime_assets"`
	// Subscriptions is the list of subscribers for the check.
	Subscriptions []string `protobuf:"bytes,11,rep,name=subscriptions" json:"subscriptions"`
	// Sources indicates the name of the entity representing an external resource
	Source string `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *CheckConfig) Reset()                    { *m = CheckConfig{} }
func (m *CheckConfig) String() string            { return proto.CompactTextString(m) }
func (*CheckConfig) ProtoMessage()               {}
func (*CheckConfig) Descriptor() ([]byte, []int) { return fileDescriptorCheck, []int{1} }

func (m *CheckConfig) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CheckConfig) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *CheckConfig) GetHandlers() []string {
	if m != nil {
		return m.Handlers
	}
	return nil
}

func (m *CheckConfig) GetHighFlapThreshold() uint32 {
	if m != nil {
		return m.HighFlapThreshold
	}
	return 0
}

func (m *CheckConfig) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *CheckConfig) GetLowFlapThreshold() uint32 {
	if m != nil {
		return m.LowFlapThreshold
	}
	return 0
}

func (m *CheckConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CheckConfig) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CheckConfig) GetPublish() bool {
	if m != nil {
		return m.Publish
	}
	return false
}

func (m *CheckConfig) GetRuntimeAssets() []string {
	if m != nil {
		return m.RuntimeAssets
	}
	return nil
}

func (m *CheckConfig) GetSubscriptions() []string {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *CheckConfig) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// A Check is a check specification and optionally the results of the check's
// execution.
type Check struct {
	// Config is the specification of a check
	Config *CheckConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// Duration of execution
	Duration float64 `protobuf:"fixed64,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// Executed describes the time in which the check request was executed
	Executed int64 `protobuf:"varint,3,opt,name=executed,proto3" json:"executed,omitempty"`
	// History is the check state history.
	History []CheckHistory `protobuf:"bytes,4,rep,name=history" json:"history"`
	// Issued describes the time in which the check request was issued
	Issued int64 `protobuf:"varint,5,opt,name=issued,proto3" json:"issued,omitempty"`
	// Output from the execution of Command
	Output string `protobuf:"bytes,6,opt,name=output,proto3" json:"output,omitempty"`
	// State provides handlers with more information about the state change
	State string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	// Status is the exit status code produced by the check
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	// TotalStateChange indicates the total state change percentage for the
	// check's history
	TotalStateChange uint32 `protobuf:"varint,9,opt,name=total_state_change,json=totalStateChange,proto3" json:"total_state_change,omitempty"`
}

func (m *Check) Reset()                    { *m = Check{} }
func (m *Check) String() string            { return proto.CompactTextString(m) }
func (*Check) ProtoMessage()               {}
func (*Check) Descriptor() ([]byte, []int) { return fileDescriptorCheck, []int{2} }

func (m *Check) GetConfig() *CheckConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Check) GetDuration() float64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Check) GetExecuted() int64 {
	if m != nil {
		return m.Executed
	}
	return 0
}

func (m *Check) GetHistory() []CheckHistory {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *Check) GetIssued() int64 {
	if m != nil {
		return m.Issued
	}
	return 0
}

func (m *Check) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *Check) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Check) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Check) GetTotalStateChange() uint32 {
	if m != nil {
		return m.TotalStateChange
	}
	return 0
}

// CheckHistory is a record of a check execution and its status
type CheckHistory struct {
	// Status is the exit status code produced by the check.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Executed describes the time in which the check request was executed
	Executed int64 `protobuf:"varint,2,opt,name=executed,proto3" json:"executed,omitempty"`
}

func (m *CheckHistory) Reset()                    { *m = CheckHistory{} }
func (m *CheckHistory) String() string            { return proto.CompactTextString(m) }
func (*CheckHistory) ProtoMessage()               {}
func (*CheckHistory) Descriptor() ([]byte, []int) { return fileDescriptorCheck, []int{3} }

func (m *CheckHistory) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CheckHistory) GetExecuted() int64 {
	if m != nil {
		return m.Executed
	}
	return 0
}

func init() {
	proto.RegisterType((*CheckRequest)(nil), "sensu.types.CheckRequest")
	proto.RegisterType((*CheckConfig)(nil), "sensu.types.CheckConfig")
	proto.RegisterType((*Check)(nil), "sensu.types.Check")
	proto.RegisterType((*CheckHistory)(nil), "sensu.types.CheckHistory")
}
func (this *CheckRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckRequest)
	if !ok {
		that2, ok := that.(CheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if len(this.Assets) != len(that1.Assets) {
		return false
	}
	for i := range this.Assets {
		if !this.Assets[i].Equal(&that1.Assets[i]) {
			return false
		}
	}
	return true
}
func (this *CheckConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckConfig)
	if !ok {
		that2, ok := that.(CheckConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if this.Environment != that1.Environment {
		return false
	}
	if len(this.Handlers) != len(that1.Handlers) {
		return false
	}
	for i := range this.Handlers {
		if this.Handlers[i] != that1.Handlers[i] {
			return false
		}
	}
	if this.HighFlapThreshold != that1.HighFlapThreshold {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.LowFlapThreshold != that1.LowFlapThreshold {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Organization != that1.Organization {
		return false
	}
	if this.Publish != that1.Publish {
		return false
	}
	if len(this.RuntimeAssets) != len(that1.RuntimeAssets) {
		return false
	}
	for i := range this.RuntimeAssets {
		if this.RuntimeAssets[i] != that1.RuntimeAssets[i] {
			return false
		}
	}
	if len(this.Subscriptions) != len(that1.Subscriptions) {
		return false
	}
	for i := range this.Subscriptions {
		if this.Subscriptions[i] != that1.Subscriptions[i] {
			return false
		}
	}
	if this.Source != that1.Source {
		return false
	}
	return true
}
func (this *Check) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Check)
	if !ok {
		that2, ok := that.(Check)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Executed != that1.Executed {
		return false
	}
	if len(this.History) != len(that1.History) {
		return false
	}
	for i := range this.History {
		if !this.History[i].Equal(&that1.History[i]) {
			return false
		}
	}
	if this.Issued != that1.Issued {
		return false
	}
	if this.Output != that1.Output {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.TotalStateChange != that1.TotalStateChange {
		return false
	}
	return true
}
func (this *CheckHistory) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckHistory)
	if !ok {
		that2, ok := that.(CheckHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Executed != that1.Executed {
		return false
	}
	return true
}
func (m *CheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Config.Size()))
		n1, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Assets) > 0 {
		for _, msg := range m.Assets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCheck(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CheckConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	if len(m.Handlers) > 0 {
		for _, s := range m.Handlers {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.HighFlapThreshold != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.HighFlapThreshold))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Interval))
	}
	if m.LowFlapThreshold != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.LowFlapThreshold))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Organization) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Organization)))
		i += copy(dAtA[i:], m.Organization)
	}
	if m.Publish {
		dAtA[i] = 0x48
		i++
		if m.Publish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RuntimeAssets) > 0 {
		for _, s := range m.RuntimeAssets {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	return i, nil
}

func (m *Check) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Check) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Config.Size()))
		n2, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Duration != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Duration))))
		i += 8
	}
	if m.Executed != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Executed))
	}
	if len(m.History) > 0 {
		for _, msg := range m.History {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCheck(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Issued != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Issued))
	}
	if len(m.Output) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.Output)))
		i += copy(dAtA[i:], m.Output)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCheck(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Status))
	}
	if m.TotalStateChange != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.TotalStateChange))
	}
	return i, nil
}

func (m *CheckHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Status))
	}
	if m.Executed != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheck(dAtA, i, uint64(m.Executed))
	}
	return i, nil
}

func encodeVarintCheck(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedCheckRequest(r randyCheck, easy bool) *CheckRequest {
	this := &CheckRequest{}
	if r.Intn(10) != 0 {
		this.Config = NewPopulatedCheckConfig(r, easy)
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Assets = make([]Asset, v1)
		for i := 0; i < v1; i++ {
			v2 := NewPopulatedAsset(r, easy)
			this.Assets[i] = *v2
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheckConfig(r randyCheck, easy bool) *CheckConfig {
	this := &CheckConfig{}
	this.Command = string(randStringCheck(r))
	this.Environment = string(randStringCheck(r))
	v3 := r.Intn(10)
	this.Handlers = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.Handlers[i] = string(randStringCheck(r))
	}
	this.HighFlapThreshold = uint32(r.Uint32())
	this.Interval = uint32(r.Uint32())
	this.LowFlapThreshold = uint32(r.Uint32())
	this.Name = string(randStringCheck(r))
	this.Organization = string(randStringCheck(r))
	this.Publish = bool(bool(r.Intn(2) == 0))
	v4 := r.Intn(10)
	this.RuntimeAssets = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.RuntimeAssets[i] = string(randStringCheck(r))
	}
	v5 := r.Intn(10)
	this.Subscriptions = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.Subscriptions[i] = string(randStringCheck(r))
	}
	this.Source = string(randStringCheck(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheck(r randyCheck, easy bool) *Check {
	this := &Check{}
	if r.Intn(10) != 0 {
		this.Config = NewPopulatedCheckConfig(r, easy)
	}
	this.Duration = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Duration *= -1
	}
	this.Executed = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Executed *= -1
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.History = make([]CheckHistory, v6)
		for i := 0; i < v6; i++ {
			v7 := NewPopulatedCheckHistory(r, easy)
			this.History[i] = *v7
		}
	}
	this.Issued = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Issued *= -1
	}
	this.Output = string(randStringCheck(r))
	this.State = string(randStringCheck(r))
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.TotalStateChange = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheckHistory(r randyCheck, easy bool) *CheckHistory {
	this := &CheckHistory{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Executed = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Executed *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyCheck interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCheck(r randyCheck) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCheck(r randyCheck) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneCheck(r)
	}
	return string(tmps)
}
func randUnrecognizedCheck(r randyCheck, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCheck(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCheck(dAtA []byte, r randyCheck, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCheck(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCheck(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CheckRequest) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovCheck(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovCheck(uint64(l))
		}
	}
	return n
}

func (m *CheckConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	if len(m.Handlers) > 0 {
		for _, s := range m.Handlers {
			l = len(s)
			n += 1 + l + sovCheck(uint64(l))
		}
	}
	if m.HighFlapThreshold != 0 {
		n += 1 + sovCheck(uint64(m.HighFlapThreshold))
	}
	if m.Interval != 0 {
		n += 1 + sovCheck(uint64(m.Interval))
	}
	if m.LowFlapThreshold != 0 {
		n += 1 + sovCheck(uint64(m.LowFlapThreshold))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	if m.Publish {
		n += 2
	}
	if len(m.RuntimeAssets) > 0 {
		for _, s := range m.RuntimeAssets {
			l = len(s)
			n += 1 + l + sovCheck(uint64(l))
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, s := range m.Subscriptions {
			l = len(s)
			n += 1 + l + sovCheck(uint64(l))
		}
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	return n
}

func (m *Check) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovCheck(uint64(l))
	}
	if m.Duration != 0 {
		n += 9
	}
	if m.Executed != 0 {
		n += 1 + sovCheck(uint64(m.Executed))
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovCheck(uint64(l))
		}
	}
	if m.Issued != 0 {
		n += 1 + sovCheck(uint64(m.Issued))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovCheck(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCheck(uint64(m.Status))
	}
	if m.TotalStateChange != 0 {
		n += 1 + sovCheck(uint64(m.TotalStateChange))
	}
	return n
}

func (m *CheckHistory) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCheck(uint64(m.Status))
	}
	if m.Executed != 0 {
		n += 1 + sovCheck(uint64(m.Executed))
	}
	return n
}

func sovCheck(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCheck(x uint64) (n int) {
	return sovCheck(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &CheckConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handlers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handlers = append(m.Handlers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighFlapThreshold", wireType)
			}
			m.HighFlapThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighFlapThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowFlapThreshold", wireType)
			}
			m.LowFlapThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowFlapThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Publish = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeAssets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeAssets = append(m.RuntimeAssets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Check) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Check: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Check: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &CheckConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Duration = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			m.Executed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Executed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, CheckHistory{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issued", wireType)
			}
			m.Issued = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Issued |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStateChange", wireType)
			}
			m.TotalStateChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStateChange |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			m.Executed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Executed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheck(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheck
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCheck
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCheck
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCheck(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCheck = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheck   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("check.proto", fileDescriptorCheck) }

var fileDescriptorCheck = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x8e, 0xd3, 0x3e,
	0x10, 0x5e, 0x37, 0x6d, 0xb7, 0x75, 0xda, 0xdf, 0x6f, 0xd7, 0x20, 0x64, 0x7a, 0x48, 0xa3, 0x72,
	0xc9, 0x01, 0xba, 0x68, 0x91, 0x40, 0x1c, 0xe9, 0x22, 0xb4, 0x67, 0xc3, 0x89, 0x4b, 0xe5, 0xa6,
	0x6e, 0x12, 0x91, 0xda, 0x21, 0xb6, 0xf7, 0x0f, 0x4f, 0xc2, 0x23, 0xf0, 0x08, 0x3c, 0xc2, 0x22,
	0x2e, 0x3c, 0x41, 0x05, 0xe5, 0xd6, 0x27, 0xe0, 0x88, 0x32, 0x4d, 0x4a, 0xb3, 0xdc, 0xb8, 0xcd,
	0x37, 0xdf, 0x37, 0x33, 0xce, 0x7c, 0xd3, 0x62, 0x37, 0x8c, 0x45, 0xf8, 0x6e, 0x9c, 0xe5, 0xca,
	0x28, 0xe2, 0x6a, 0x21, 0xb5, 0x1d, 0x9b, 0xeb, 0x4c, 0xe8, 0xc1, 0xa3, 0x28, 0x31, 0xb1, 0x9d,
	0x8d, 0x43, 0xb5, 0x3c, 0x89, 0x54, 0xa4, 0x4e, 0x40, 0x33, 0xb3, 0x0b, 0x40, 0x00, 0x20, 0xda,
	0xd6, 0x0e, 0x5c, 0xae, 0xb5, 0x30, 0x5b, 0x30, 0xba, 0xc2, 0xbd, 0xb3, 0xa2, 0x2f, 0x13, 0xef,
	0xad, 0xd0, 0x86, 0x3c, 0xc5, 0xed, 0x50, 0xc9, 0x45, 0x12, 0x51, 0xe4, 0xa3, 0xc0, 0x3d, 0xa5,
	0xe3, 0xbd, 0x49, 0x63, 0x90, 0x9e, 0x01, 0x3f, 0x69, 0xde, 0xac, 0x86, 0x88, 0x95, 0x6a, 0xf2,
	0x18, 0xb7, 0xa1, 0xad, 0xa6, 0x0d, 0xdf, 0x09, 0xdc, 0x53, 0x52, 0xab, 0x7b, 0x51, 0x50, 0x50,
	0x71, 0xc0, 0x4a, 0xdd, 0xe8, 0xab, 0x83, 0xdd, 0xbd, 0x7e, 0x84, 0xe2, 0xc3, 0x50, 0x2d, 0x97,
	0x5c, 0xce, 0x61, 0x74, 0x97, 0x55, 0x90, 0xf8, 0xd8, 0x15, 0xf2, 0x22, 0xc9, 0x95, 0x5c, 0x0a,
	0x69, 0x68, 0x03, 0xd8, 0xfd, 0x14, 0x09, 0x70, 0x27, 0xe6, 0x72, 0x9e, 0x8a, 0x5c, 0x53, 0xc7,
	0x77, 0x82, 0xee, 0xa4, 0xb7, 0x59, 0x0d, 0x77, 0x39, 0xb6, 0x8b, 0xc8, 0x18, 0xdf, 0x89, 0x93,
	0x28, 0x9e, 0x2e, 0x52, 0x9e, 0x4d, 0x4d, 0x9c, 0x0b, 0x1d, 0xab, 0x74, 0x4e, 0x9b, 0x3e, 0x0a,
	0xfa, 0xec, 0xb8, 0xa0, 0x5e, 0xa5, 0x3c, 0x7b, 0x53, 0x11, 0x64, 0x80, 0x3b, 0x89, 0x34, 0x22,
	0xbf, 0xe0, 0x29, 0x6d, 0x81, 0x68, 0x87, 0xc9, 0x43, 0x4c, 0x52, 0x75, 0x79, 0xbb, 0x55, 0x1b,
	0x54, 0x47, 0xa9, 0xba, 0xac, 0x77, 0x22, 0xb8, 0x29, 0xf9, 0x52, 0xd0, 0x43, 0x78, 0x3e, 0xc4,
	0x64, 0x84, 0x7b, 0x2a, 0x8f, 0xb8, 0x4c, 0x3e, 0x70, 0x93, 0x28, 0x49, 0x3b, 0xc0, 0xd5, 0x72,
	0xc5, 0x5e, 0x32, 0x3b, 0x4b, 0x13, 0x1d, 0xd3, 0xae, 0x8f, 0x82, 0x0e, 0xab, 0x20, 0x79, 0x8e,
	0xff, 0xcb, 0xad, 0x34, 0xc9, 0x52, 0x4c, 0xcb, 0xdd, 0x63, 0xf8, 0x76, 0xb2, 0x59, 0x0d, 0x6f,
	0x31, 0xac, 0x5f, 0x62, 0x70, 0x42, 0x93, 0x67, 0xb8, 0xaf, 0xed, 0x4c, 0x87, 0x79, 0x92, 0x15,
	0x43, 0x34, 0x75, 0xa1, 0xf2, 0x78, 0xb3, 0x1a, 0xd6, 0x09, 0x56, 0x87, 0xe4, 0x1e, 0x6e, 0x6b,
	0x65, 0xf3, 0x50, 0xd0, 0x1e, 0xbc, 0xb5, 0x44, 0xa3, 0x2f, 0x0d, 0xdc, 0x02, 0x37, 0xff, 0xf9,
	0x82, 0x06, 0xb8, 0x33, 0xb7, 0xf9, 0x76, 0x0f, 0x85, 0xc5, 0x88, 0xed, 0x70, 0xc1, 0x89, 0x2b,
	0x11, 0x5a, 0x23, 0xe6, 0xd4, 0xf1, 0x51, 0xe0, 0xb0, 0x1d, 0x26, 0x2f, 0xf1, 0x61, 0x9c, 0x68,
	0xa3, 0xf2, 0x6b, 0xda, 0x84, 0xd3, 0xbb, 0xff, 0xf7, 0xc0, 0xf3, 0xad, 0x60, 0xf2, 0x7f, 0x71,
	0x81, 0x9b, 0xd5, 0xb0, 0xaa, 0x60, 0x55, 0x50, 0x7c, 0x57, 0xa2, 0xb5, 0x15, 0x73, 0x70, 0xd9,
	0x61, 0x25, 0x2a, 0xf2, 0xca, 0x9a, 0xcc, 0x1a, 0xf0, 0xb5, 0xcb, 0x4a, 0x44, 0xee, 0xe2, 0x96,
	0x36, 0xdc, 0x54, 0x76, 0x6e, 0x01, 0x6c, 0xc7, 0x70, 0x63, 0x35, 0x38, 0xd9, 0x62, 0x25, 0x2a,
	0x2e, 0xc5, 0x28, 0xc3, 0xd3, 0x29, 0xc8, 0xa6, 0x61, 0xcc, 0x65, 0x24, 0xc0, 0xce, 0x3e, 0x3b,
	0x02, 0xe6, 0x75, 0x41, 0x9c, 0x41, 0x7e, 0x34, 0x29, 0x7f, 0x93, 0xe7, 0x7f, 0xde, 0x56, 0x76,
	0x45, 0xb5, 0xae, 0xfb, 0x5b, 0x69, 0xd4, 0xb7, 0x32, 0x79, 0xf0, 0xeb, 0x87, 0x87, 0x3e, 0xad,
	0x3d, 0xf4, 0x79, 0xed, 0xa1, 0x9b, 0xb5, 0x87, 0xbe, 0xad, 0x3d, 0xf4, 0x7d, 0xed, 0xa1, 0x8f,
	0x3f, 0xbd, 0x83, 0xb7, 0x2d, 0xd8, 0xcd, 0xac, 0x0d, 0xff, 0x01, 0x4f, 0x7e, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xf6, 0x0a, 0x89, 0x23, 0x5b, 0x04, 0x00, 0x00,
}
